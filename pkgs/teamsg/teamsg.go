package teamsg

import (
	"azdoext/pkgs/azdo"
	"azdoext/pkgs/listitems"
	"azdoext/pkgs/utils"

	"github.com/charmbracelet/bubbles/list"
	"github.com/google/uuid"
)

/*
generated by: main loop
description: this message contains everything needed to interact with Azure Devops and is part return by the Init() function in main.go
*/
type AzdoConfigMsg azdo.Config

/*
description: this message is used to configure options for a list
*/
type OptionsMsg []list.Item

/*
generated by: every section that is based on choice.go on 'enter' key
description: other parts of the application can listen to this message to react to selected option
*/
type SubmitChoiceMsg listitems.OptionName

/*
generated by: commit section
description: this message is generated when user submits a commit by pressing 'ctrl+s'
*/
type CommitMsg string

/*
generated by: pipelinerun page
description: this message is used to maximize a section on pipelinerun page. used mainly to maximize logs section
*/
type ToggleMaximizeMsg struct{}

/*
generated by: logviewport section
description: this message indicates that the context for reading logs is done
*/
// type ReadLogsCtxDoneMsg struct{}

/*
generated by: pipelinelist section in fetchBuilds function
description: this message contains the list of builds fetched from Azure DevOps matching the current repository. pipelinelist section reacts to it by updating the list
with current values and calling fetchBuilds() again, creating a loop.
*/
type BuildsFetchedMsg []list.Item

/*
generated by: pipelinelist section whenever a pipeline is selected
description: this message contains all the details of a pipeline. this is used by pipelinelist page to add a choice section.
*/
type PipelineSelectedMsg listitems.PipelineItem

/*
generated by: pipelinelist section whenever a choice is made on the selected pipeline
description: this message is used by the main loop to add pipelinerun page. then, it's used on logviewport and pipelinetasks section to start monitoring or to show the given pipeline
*/
type PipelineRunIdMsg struct {
	RunId        int
	PipelineName string
	ProjectId    string
	Status       string
}

/*
generated by: pipelinetasks section whenever a particular task is selected
description: this is used on logviewport to show the logs of the selected task
*/
type RecordSelectedMsg struct {
	RecordId uuid.UUID
}

/*
generated by: pipelinetasks section on getRunState function
description: this message is used by pipelinetasks to update the state of the tasks list, it then invokes getRunState again, creating a loop.
*/
type PipelineRunStateMsg struct {
	Items  []list.Item
	Status string
}

/*
generated by: prtext section on openPR function as a reaction to SubmitPRMsg
description: this message indicates that a pull request was successfully opened
*/
type GitPRCreatedMsg struct{}

/*
generated by: prtext section on openPR function
description: this message indicates that there was an error opening the pr
*/
type PRErrorMsg string

/*
generated by: prtext section on 'ctrl+s' key
description: this message contains the content of a submitted pull request
*/
type SubmitPRMsg string

/*
generated by: worktree section
description: this message indicates whether the git push was successful. it's a reaction to CommitMsg.
*/
type GitPushedMsg bool

/*
generated by: worktree section
description: this message indicates that the git push process has started
*/
type GitPushingMsg bool

/*
generated by: worktree section
description: this message indicates that there is nothing to commit. it's used by the main loop to go straight to the pipelinelist page
*/
type NothingToCommitMsg struct{}

/*
generated by: logviewport section
description: this message contains updated log information. it comes from the signalr websocket connection through a channel
*/
type LogMsg struct {
	utils.TimelineRecordId
	StepRecordId uuid.UUID
	BuildStatus  string
	BuildResult  string
	NewContent   string
}
